admin:
  access_log_path: /dev/stdout
  address:
    socket_address:
      address: 127.0.0.1
      port_value: 9901

static_resources:
  listeners:
    - name: jag_snap_proxy
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 18899
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_http
                codec_type: AUTO
                server_name: None
                use_remote_address: true
                xff_num_trusted_hops: 0
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: /dev/stdout
                http_filters:
                  - name: envoy.filters.http.local_ratelimit
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
                      stat_prefix: http_local_rate_limiter
                  - name: envoy.filters.http.lua
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      inline_code: |
                        function envoy_on_request(request_handle)
                          local body = request_handle:body()
                          local cjson = require("cjson")
                          if body then
                            local json = cjson.decode(body:getBytes(0, body:length()))
                            local allowed_methods = {
                              ["getSlot"] = true,
                              ["getHighestSnapshotSlot"] = true
                            }
                            if not allowed_methods[json.method] then
                              request_handle:headers():replace(":status", "403")
                              request_handle:respond(
                                {[":status"] = "403"},
                                cjson.encode({
                                  jsonrpc = "2.0",
                                  error = { code = -32601, message = "Method not allowed" },
                                  id = json.id or 1
                                })
                              )
                            end
                          end
                        end
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: solana_validator_service
                      domains: ["*"]
                      routes:
                        - match:
                            prefix: "/snapshot"
                          route:
                            cluster: solana_validator
                            timeout: 0s
                        - match:
                            prefix: "/"
                          route:
                            cluster: solana_validator
                          typed_per_filter_config:
                            envoy.filters.http.local_ratelimit:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
                              stat_prefix: http_local_rate_limiter
                              token_bucket:
                                max_tokens: 10
                                tokens_per_fill: 10
                                fill_interval: 60s
                              filter_enabled:
                                runtime_key: local_rate_limit_enabled
                                default_value:
                                  numerator: 100
                                  denominator: HUNDRED
                              filter_enforced:
                                runtime_key: local_rate_limit_enforced
                                default_value:
                                  numerator: 100
                                  denominator: HUNDRED
                              response_headers_to_add:
                                - append: false
                                  header:
                                    key: x-local-rate-limit
                                    value: 'true'
                              descriptors:
                                - entries:
                                    - key: remote_address
                                      value: "*"
                                  token_bucket:
                                    max_tokens: 10
                                    tokens_per_fill: 10
                                    fill_interval: 60s
  clusters:
    - name: solana_validator
      connect_timeout: 5s
      type: STATIC
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: solana_validator
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 8899