worker_processes 1; # Minimal for lightweight operation
events {
    worker_connections 1024;
}

http {
    server_tokens off;
    lua_package_path "/usr/local/openresty/lualib/?.lua;;"; # Include Lua scripts

    # rate limiting
    limit_req_zone $binary_remote_addr zone=perip:10m rate=10r/m;

    # prometheus
    lua_shared_dict prometheus_metrics 10M;
    init_worker_by_lua_block {
        prometheus = require("prometheus").init("prometheus_metrics")
        -- define a counter, with e.g. remote_addr as a label
        metric_requests_by_ip = prometheus:counter(
            "nginx_http_requests_by_ip_total",
            "Count of HTTP requests by client IP",
            {"remote_addr"}
        )
    }

    upstream solana_validator {
        server 127.0.0.1:8899; # Solana validator RPC port
    }

    server {
        listen 18899;
        server_name localhost;
        more_set_headers 'Server: None';

        log_by_lua_block {
            local ip = ngx.var.remote_addr or "unknown"
            metric_requests_by_ip:inc(1, { ip })
        }

        # RPC filtering for getSlot + getHighestSnapshotSlot
        location / {
            limit_req zone=perip burst=1 nodelay;
            limit_req_status 429;

            access_by_lua_block {
                ngx.req.read_body()
                local cjson = require "cjson"
                local body = ngx.req.get_body_data()
                if body then
                    local json = cjson.decode(body)
                    local allowed_methods = {
                        getSlot = true,
                        getHighestSnapshotSlot = true
                    }
                    if not allowed_methods[json.method] then
                        ngx.status = 403
                        ngx.say(cjson.encode({
                            jsonrpc = "2.0",
                            error = { code = -32601, message = "Method not allowed" },
                            id = json.id or 1
                        }))
                        return ngx.exit(ngx.HTTP_FORBIDDEN)
                    end
                end
            }
            proxy_pass http://solana_validator; # Points to 127.0.0.1:8899
            proxy_set_header Host $host;

            error_page 429 = @custom_error_429;
            error_page 403 = @custom_error_403;
            error_page 400 401 404 405 408 429 500 502 503 504 = @custom_error;
        }

        # Snapshot proxy (optional separate path)
        location /snapshot {
            proxy_pass http://solana_validator; # Points to 127.0.0.1:8899
            proxy_set_header Host $host;
        }

        location @custom_error_429 {
            internal;
            add_header Content-Type text/plain always;
            return 429 "Error\n";  # Default message for all errors
        }

        location @custom_error_403 {
            internal;
            add_header Content-Type text/plain always;
            return 403 "Error\n";  # Default message for all errors
        }

        location @custom_error {
            internal;
            add_header Content-Type text/plain always;
            return 403 "Error\n";  # Default message for all errors
        }
    }

    server {
        listen 9145;
        location /metrics {
            content_by_lua_block {
                prometheus:collect()
            }
        }
    }
}
