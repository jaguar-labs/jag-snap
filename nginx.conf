worker_processes 1; # Minimal for lightweight operation
events {
    worker_connections 1024;
}

http {
    server_tokens off;
    lua_package_path "/usr/local/openresty/lualib/?.lua;;"; # Include Lua scripts
    upstream solana_validator {
        server 127.0.0.1:8899; # Solana validator RPC port
    }

    server {
        listen 18899;
        server_name localhost;
        more_set_headers 'Server: None'

        # RPC filtering for getSlot only
        location / {
            access_by_lua_block {
                local cjson = require "cjson"
                local body = ngx.req.get_body_data()
                if body then
                    local json = cjson.decode(body)
                    if json.method ~= "getSlot" then
                        ngx.status = 403
                        ngx.say('{"jsonrpc":"2.0","error":{"code":-32601,"message":"Method not allowed"},"id":' .. (json.id or 1) .. '}')
                        return ngx.exit(ngx.HTTP_FORBIDDEN)
                    end
                end
            }
            proxy_pass http://solana_validator; # Points to 127.0.0.1:8899
            proxy_set_header Host $host;
        }
        # Snapshot proxy
        location /snapshot {
            # Use Lua script for retries (uncomment if needed)
            # content_by_lua_file /usr/local/openresty/lualib/resty/snapshot.lua;
            # proxy_pass http://api.mainnet-beta.solana.com:80; # Fallback to public RPC
            proxy_pass http://solana_validator; # Points to 127.0.0.1:8899
            proxy_set_header Host $host;
        }
    }
}
